use lazy_static::lazy_static;
use maplit::hashmap;
use crate::ns::*;

lazy_static! {
    pub static ref DATA: HashMap<i32, String> = hashmap! {
        // SwDiagnosticKind::K.id() => ".".into(),
        SwDiagnosticKind::EntityIsNotAType.id() => "Entity is not a type.".into(),
        SwDiagnosticKind::ImplicitCoercionToUnrelatedType.id() => "Implicit coercion of a value of type {1} to an unrelated type {2}.".into(),
        SwDiagnosticKind::EntityIsReadOnly.id() => "Entity is read-only.".into(),
        SwDiagnosticKind::EntityIsWriteOnly.id() => "Entity is write-only.".into(),
        SwDiagnosticKind::EntityMustNotBeDeleted.id() => "Entity must not be deleted.".into(),
        SwDiagnosticKind::UndefinedProperty.id() => "Access of possibly undefined property {1}.".into(),
        SwDiagnosticKind::AmbiguousReference.id() => "Ambiguous reference to {1}.".into(),
        SwDiagnosticKind::AccessOfVoid.id() => "Accessing property of void.".into(),
        SwDiagnosticKind::AccessOfNullable.id() => "Accessing property of nullable data type.".into(),
        SwDiagnosticKind::CouldNotExpandInlineConstant.id() => "Could not expand inline constant.".into(),
        SwDiagnosticKind::ReachedMaximumCycles.id() => "Reached maximum cycles.".into(),
        SwDiagnosticKind::NullNotExpectedHere.id() => "Null not expected here.".into(),
        SwDiagnosticKind::CouldNotParseNumber.id() => "Could not parse {1}.".into(),
        SwDiagnosticKind::NoMatchingEnumMember.id() => "Found no member {1} in {2}.".into(),
        SwDiagnosticKind::UnexpectedThis.id() => "Unexpected this.".into(),
        SwDiagnosticKind::ArrayLengthNotEqualsTupleLength.id() => "Array length is not equals length of tuple {1}.".into(),
        SwDiagnosticKind::UnexpectedElision.id() => "Unexpected elision.".into(),
        SwDiagnosticKind::UnexpectedArray.id() => "Unexpected array.".into(),
        SwDiagnosticKind::UnexpectedRest.id() => "Unexpected rest.".into(),
        SwDiagnosticKind::UnexpectedObject.id() => "Unexpected object.".into(),
        SwDiagnosticKind::DynamicOptionNotSupported.id() => "Dynamic option name is not supported.".into(),
        SwDiagnosticKind::UnknownOptionForClass.id() => "Unknown option {1} for {2}.".into(),
        SwDiagnosticKind::MustSpecifyOption.id() => "Must specify option {1}.".into(),
        SwDiagnosticKind::UnexpectedFieldName.id() => "Unexpected field name.".into(),
        SwDiagnosticKind::UnexpectedNewBase.id() => "Unexpected new base.".into(),
        SwDiagnosticKind::IncorrectNumArguments.id() => "Incorrect number of arguments. Expected {1}".into(),
        SwDiagnosticKind::IncorrectNumArgumentsNoMoreThan.id() => "Incorrect number of arguments. Expected no more than {1}".into(),
        SwDiagnosticKind::UndefinedPropertyWithStaticType.id() => "Access of possibly undefined property {1} through a reference with static type {2}.".into(),
        SwDiagnosticKind::InapplicableFilter.id() => "Attempt to filter through a reference with static type {1}.".into(),
        SwDiagnosticKind::InapplicableDescendants.id() => "Attempt to search descendants through a reference with static type {1}.".into(),
        SwDiagnosticKind::ASuperExpCanBeUsedOnlyIn.id() => "A super expression can be used only in class instance methods.".into(),
        SwDiagnosticKind::ASuperExpCanOnlyBeUsedInSubclasses.id() => "A super expression can be used only in subclasses of Object.".into(),
        SwDiagnosticKind::CallOnArrayType.id() => "A call on the Array type is equivalent to a new expression.".into(),
        SwDiagnosticKind::CallOnNonFunction.id() => "Call on non Function object.".into(),
        SwDiagnosticKind::NonParameterizedType.id() => "Applying types on non parameterized type.".into(),
        SwDiagnosticKind::AwaitOperandMustBeAPromise.id() => "Await operand must be a Promise.".into(),
        SwDiagnosticKind::OperandMustBeNumber.id() => "Operand must be a Number.".into(),
        SwDiagnosticKind::ReferenceIsAlreadyNonNullable.id() => "Reference is already non nullable.".into(),
        SwDiagnosticKind::YieldIsNotSupported.id() => "Yield operator is currently not supported.".into(),
        SwDiagnosticKind::UnrelatedMathOperation.id() => "Unrelated mathematical operation using type {1}.".into(),
        SwDiagnosticKind::ComparisonBetweenUnrelatedTypes.id() => "Comparison between a value of type {1} and an unrelated type {2}.".into(),
        SwDiagnosticKind::UnrelatedTernaryOperands.id() => "Unrelated ternary operands of types {1} and {2}.".into(),
        SwDiagnosticKind::SystemNamespaceNotFound.id() => "System namespace not found.".into(),
        SwDiagnosticKind::RestParameterMustBeArray.id() => "Rest parameter must be an Array.".into(),
        SwDiagnosticKind::AConflictExistsWithDefinition.id() => "A conflict exists with definition {1} in namespace {2}.".into(),
        SwDiagnosticKind::DuplicateVariableDefinition.id() => "Duplicate variable definition: {1}.".into(),
        SwDiagnosticKind::DuplicateClassDefinition.id() => "Duplicate variable definition: {1}.".into(),
        SwDiagnosticKind::DuplicateInterfaceDefinition.id() => "Duplicate interface definition: {1}.".into(),
        SwDiagnosticKind::DuplicateFunctionDefinition.id() => "Duplicate function definition: {1}.".into(),
        SwDiagnosticKind::UnexpectedFieldNameInDestructuring.id() => "Unexpected field name in destructuring.".into(),
        SwDiagnosticKind::EntityIsNotAConstant.id() => "Entity is not a constant.".into(),
        SwDiagnosticKind::ReturnValueHasNoTypeDeclaration.id() => "Return value has no type declaration.".into(),
        SwDiagnosticKind::ReturnTypeDeclarationMustBePromise.id() => "Return type declaration must be Promise.".into(),
        SwDiagnosticKind::ReturnTypeInferenceIsNotImplemented.id() => "Return type inference is not implemented in the present. Using an untyped type.".into(),
        SwDiagnosticKind::NanComparison.id() => "Comparison involving NaN. Use isNaN() or !isNaN() instead.".into(),
        SwDiagnosticKind::NotABooleanConstant.id() => "Not a Boolean constant.".into(),
        SwDiagnosticKind::EmptyPackage.id() => "Package {1} is empty.".into(),
        SwDiagnosticKind::ImportOfUndefined.id() => "Import of undefined property {1}.".into(),
        SwDiagnosticKind::NotANamespaceConstant.id() => "Not a Namespace constant.".into(),
        SwDiagnosticKind::CannotResolveConfigConstant.id() => "Can not resolve configuration constant: '{1}'".into(),
        SwDiagnosticKind::ConcatenatingSelfReferentialPackage.id() => "Concatenating a self referential package.".into(),
        SwDiagnosticKind::CallOnDateType.id() => "'Date(...)' is not a cast. It ignores its arguments and returns a String value equal to 'new Date().toString()'. To cast a value to type Date use 'x as Date' instead of 'Date(x)'.".into(),
        SwDiagnosticKind::AccessControlNamespaceNotAllowedHere.id() => "Access control namespace not allowed here.".into(),
        SwDiagnosticKind::CannotUseDestructuringHere.id() => "Cannot use destructuring here.".into(),
        SwDiagnosticKind::ShadowingDefinitionInBaseClass.id() => "Shadowing definition in base class: $1.".into(),
        SwDiagnosticKind::VariableHasNoTypeAnnotation.id() => "Variable has no type annotation.".into(),
        SwDiagnosticKind::ConstantMustContainInitializer.id() => "Constant must contain initializer.".into(),
        SwDiagnosticKind::ExternalFunctionMustBeNativeOrAbstract.id() => "External function must be marked native or abstract.".into(),
        SwDiagnosticKind::IncompatibleOverride.id() => "Incompatible override signature: expected $1, but specified $2.".into(),
        SwDiagnosticKind::MustOverrideAMethod.id() => "Must override a method.".into(),
        SwDiagnosticKind::OverridingFinalMethod.id() => "Cannot override a method marked final.".into(),
        SwDiagnosticKind::RedefiningConstructor.id() => "Redefining constructor.".into(),
        SwDiagnosticKind::ConstructorMustContainSuperStatement.id() => "Constructor must contain super statement.".into(),
        SwDiagnosticKind::GetterMustTakeNoParameters.id() => "Getter must take no parameters.".into(),
        SwDiagnosticKind::SetterMustTakeOneParameter.id() => "Setter must take one parameter.".into(),
        SwDiagnosticKind::GetterMustReturnDataType.id() => "Getter must return data type $1.".into(),
        SwDiagnosticKind::SetterMustTakeDataType.id() => "Setter must take data type $1.".into(),
        SwDiagnosticKind::SetterMustReturnVoid.id() => "Setter must return void.".into(),
        // SwDiagnosticKind::K.id() => ".".into(),
    };
}